# This is a basic workflow to help you get started with Actions

name: Run arxiv-reader on Arxiv paper

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      paper_title:
        description: 'Title of the paper'
        required: true
        type: string
      arxiv_id:
        description: 'Arxiv ID of the paper to run arxiv-reader on'
        required: false
        default: ""
        type: string
      paper_url:
        description: 'URL of paper to convert'
        required: false
        default: ""
        type: string
      remove_ranges:
        description: 'Remove range of lines from arxiv LaTeX source. See arxiv-reader/convert.py arguments.'
        required: false
        type: string
        default: '[]'

env:
  REGISTRY: ghcr.io
  # Can't use ${{ env.REGISTRY }} here, but would like to, so that we' don't
  # repeat ghcr.io.
  IMAGE_TAG: ghcr.io/${{ github.repository }}

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      # Needed for adding podcast episodes.
      contents: write
      packages: read

    steps:
      # Messy: we need to checkout the repo first, because otherwise it deletes
      # files.
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run arxiv-reader
        run: |
          CONTAINER_NAME=run-$(date +%s)
          echo "Docker container name: $CONTAINER_NAME"
          docker run \
            --name $CONTAINER_NAME \
            ${{ env.IMAGE_TAG }} \
            bash -c "cd /root/arxiv-reader && python3 convert.py --arxiv_id ${{ github.event.inputs.arxiv_id }} --remove_ranges '${{ github.event.inputs.remove_ranges }} --output_filepath out.mp3"
          docker cp $CONTAINER_NAME:/root/arxiv-reader/out.mp3 out.mp3
        if: github.event.inputs.arxiv_id != ''

      - name: Run arxiv-reader
        run: |
          CONTAINER_NAME=run-$(date +%s)
          echo "Docker container name: $CONTAINER_NAME"
          docker run \
            --name $CONTAINER_NAME \
            ${{ env.IMAGE_TAG }} \
            bash -c "cd /root/arxiv-reader && python3 convert.py --paper_url ${{ github.event.inputs.paper_url }} --output_filepath out.mp3"
          docker cp $CONTAINER_NAME:/root/arxiv-reader/out.mp3 out.mp3
        if: github.event.inputs.paper_url != ''
      - name: Upload arxiv-reader output
        uses: actions/upload-artifact@v3
        with:
          name: "out.mp3"
          path: "out.mp3"

      - name: Generate files
        id: generate_files
        run: |
          # Install ffmpeg, for getting duration
          sudo apt-get update && sudo apt-get install -y ffmpeg
          
          # Files to add
          AUDIO_FILEPATH="audio/${{ github.event.inputs.paper_title }}.mp3"
          # Convert spaces to underscores.
          AUDIO_FILEPATH=${AUDIO_FILEPATH// /_}
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          POST_FILEPATH=_entries/$TIMESTAMP.md
          echo "AUDIO_FILEPATH=$AUDIO_FILEPATH" >> $GITHUB_OUTPUT
          echo "POST_FILEPATH=$POST_FILEPATH" >> $GITHUB_OUTPUT

          # Move audio file into place
          mv out.mp3 "$AUDIO_FILEPATH"

          # Needed information
          BYTES=$(wc -c < "$AUDIO_FILEPATH")
          # ffprobe -show_entries stream=duration -of compact=p=0:nk=1 -sexagesimal -v fatal "$AUDIO_FILEPATH"
          # DURATION=$(ffprobe -show_entries stream=duration -of compact=p=0:nk=1 -sexagesimal -v fatal "$AUDIO_FILEPATH")

          # Generate post file
          pwd
          tree
          cat > "$POST_FILEPATH" <<EOF
          ---
          title: "${{ github.event.inputs.paper_title }}"
          date: $TIMESTAMP
          podcast_link: "http://gussmith23.github.io/run-arxiv-reader-on-github-actions/$AUDIO_FILEPATH"
          podcast_file_size: $BYTES B
          podcast_duration: "$DURATION"
          podcast_length: $BYTES
          ---
          EOF

      - name: Add and commit post and audio files
        uses: EndBug/add-and-commit@v9.1.3
        with:
          add: ${{ steps.generate_files.outputs.POST_FILEPATH }} ${{ steps.generate_files.outputs.AUDIO_FILEPATH }}
          message: "Add ${{ github.event.inputs.paper_title }}"
          default_author: github_actions
